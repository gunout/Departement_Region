import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

class ReunionCollectiviteFinanceAnalyzer:
    def __init__(self, collectivite_name, collectivite_type):
        self.collectivite = collectivite_name
        self.type = collectivite_type  # 'departement' ou 'region'
        self.colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#F9A602', '#6A0572', 
                      '#AB83A1', '#5CAB7D', '#2A9D8F', '#E76F51', '#264653']
        
        self.start_year = 2002
        self.end_year = 2025
        
        # Configuration sp√©cifique pour chaque collectivit√©
        self.config = self._get_collectivite_config()
        
    def _get_collectivite_config(self):
        """Retourne la configuration sp√©cifique pour chaque collectivit√© r√©unionnaise"""
        if self.type == "departement":
            configs = {
                "D√©partement R√©union": {
                    "population_base": 865000,
                    "budget_base": 1850 if self.type == "departement" else 950,
                    "type": self.type,
                    "specialites": ["action_sociale", "education", "routes", "culture", "environnement", "sante"]
                }
            }
        else:  # r√©gion
            configs = {
                "R√©gion R√©union": {
                    "population_base": 865000,
                    "budget_base": 950,
                    "type": self.type,
                    "specialites": ["developpement_economique", "lycees", "formation", "transport", "amenagement", "tourisme"]
                }
            }
        
        return configs.get(self.collectivite, configs["D√©partement R√©union" if self.type == "departement" else "R√©gion R√©union"])
    
    def generate_financial_data(self):
        """G√©n√®re des donn√©es financi√®res pour la collectivit√©"""
        print(f"üèõÔ∏è G√©n√©ration des donn√©es financi√®res pour {self.collectivite}...")
        
        # Cr√©er une base de donn√©es annuelle
        dates = pd.date_range(start=f'{self.start_year}-01-01', 
                             end=f'{self.end_year}-12-31', freq='Y')
        
        data = {'Annee': [date.year for date in dates]}
        
        # Donn√©es d√©mographiques
        data['Population'] = self._simulate_population(dates)
        
        # Recettes
        data['Recettes_Totales'] = self._simulate_total_revenue(dates)
        data['Impots_Locaux'] = self._simulate_tax_revenue(dates)
        data['Dotations_Etat'] = self._simulate_state_grants(dates)
        data['Autres_Recettes'] = self._simulate_other_revenue(dates)
        data['Fonds_Europeens'] = self._simulate_european_funds(dates)
        
        # D√©penses
        data['Depenses_Totales'] = self._simulate_total_expenses(dates)
        data['Fonctionnement'] = self._simulate_operating_expenses(dates)
        data['Investissement'] = self._simulate_investment_expenses(dates)
        data['Charge_Dette'] = self._simulate_debt_charges(dates)
        data['Personnel'] = self._simulate_staff_costs(dates)
        
        # Indicateurs financiers
        data['Epargne_Brute'] = self._simulate_gross_savings(dates)
        data['Dette_Totale'] = self._simulate_total_debt(dates)
        data['Taux_Endettement'] = self._simulate_debt_ratio(dates)
        data['Taux_Fiscalite'] = self._simulate_tax_rate(dates)
        
        # Investissements sp√©cifiques adapt√©s √† La R√©union
        if self.type == "departement":
            data['Investissement_Action_Sociale'] = self._simulate_social_investment(dates)
            data['Investissement_Education'] = self._simulate_education_investment(dates)
            data['Investissement_Routes'] = self._simulate_roads_investment(dates)
            data['Investissement_Sante'] = self._simulate_health_investment(dates)
            data['Investissement_Culture'] = self._simulate_culture_investment(dates)
        else:  # r√©gion
            data['Investissement_Lycees'] = self._simulate_highschool_investment(dates)
            data['Investissement_Formation'] = self._simulate_training_investment(dates)
            data['Investissement_Transport'] = self._simulate_transport_investment(dates)
            data['Investissement_Economie'] = self._simulate_economy_investment(dates)
            data['Investissement_Tourisme'] = self._simulate_tourism_investment(dates)
        
        df = pd.DataFrame(data)
        
        # Ajouter des tendances sp√©cifiques √† La R√©union
        self._add_collectivite_trends(df)
        
        return df
    
    def _simulate_population(self, dates):
        """Simule la population de La R√©union (croissance forte)"""
        base_population = self.config["population_base"]
        
        population = []
        for i, date in enumerate(dates):
            # Croissance d√©mographique forte √† La R√©union
            growth_rate = 0.015  # 1.5% de croissance annuelle
            
            growth = 1 + growth_rate * i
            population.append(base_population * growth)
        
        return population
    
    def _simulate_total_revenue(self, dates):
        """Simule les recettes totales de la collectivit√©"""
        base_revenue = self.config["budget_base"]
        
        revenue = []
        for i, date in enumerate(dates):
            # Croissance variable selon le type de collectivit√©
            if self.type == "departement":
                growth_rate = 0.038
            else:
                growth_rate = 0.042
                
            growth = 1 + growth_rate * i
            noise = np.random.normal(1, 0.07)
            revenue.append(base_revenue * growth * noise)
        
        return revenue
    
    def _simulate_tax_revenue(self, dates):
        """Simule les recettes fiscales"""
        if self.type == "departement":
            base_tax = self.config["budget_base"] * 0.25
        else:
            base_tax = self.config["budget_base"] * 0.20
        
        tax_revenue = []
        for i, date in enumerate(dates):
            growth = 1 + 0.03 * i
            noise = np.random.normal(1, 0.08)
            tax_revenue.append(base_tax * growth * noise)
        
        return tax_revenue
    
    def _simulate_state_grants(self, dates):
        """Simule les dotations de l'√âtat (importantes pour les DOM)"""
        if self.type == "departement":
            base_grants = self.config["budget_base"] * 0.55
        else:
            base_grants = self.config["budget_base"] * 0.60
        
        grants = []
        for i, date in enumerate(dates):
            year = date.year
            # Augmentation des dotations pour les DOM
            if year >= 2010:
                increase = 1 + 0.01 * (year - 2010)
            else:
                increase = 1
            
            noise = np.random.normal(1, 0.05)
            grants.append(base_grants * increase * noise)
        
        return grants
    
    def _simulate_european_funds(self, dates):
        """Simule les fonds europ√©ens (importants pour La R√©union)"""
        if self.type == "departement":
            base_funds = self.config["budget_base"] * 0.08
        else:
            base_funds = self.config["budget_base"] * 0.12
        
        funds = []
        for i, date in enumerate(dates):
            year = date.year
            # Cycles des fonds europ√©ens
            if 2007 <= year <= 2013:
                multiplier = 1.2  # P√©riode de programmation 2007-2013
            elif 2014 <= year <= 2020:
                multiplier = 1.4  # P√©riode de programmation 2014-2020
            elif year >= 2021:
                multiplier = 1.3  # P√©riode de programmation 2021-2027
            else:
                multiplier = 1.0
            
            growth = 1 + 0.025 * i
            noise = np.random.normal(1, 0.15)
            funds.append(base_funds * growth * multiplier * noise)
        
        return funds
    
    def _simulate_other_revenue(self, dates):
        """Simule les autres recettes"""
        if self.type == "departement":
            base_other = self.config["budget_base"] * 0.12
        else:
            base_other = self.config["budget_base"] * 0.08
        
        other_revenue = []
        for i, date in enumerate(dates):
            growth = 1 + 0.028 * i
            noise = np.random.normal(1, 0.09)
            other_revenue.append(base_other * growth * noise)
        
        return other_revenue
    
    def _simulate_total_expenses(self, dates):
        """Simule les d√©penses totales"""
        base_expenses = self.config["budget_base"] * 0.98
        
        expenses = []
        for i, date in enumerate(dates):
            growth = 1 + 0.036 * i
            noise = np.random.normal(1, 0.06)
            expenses.append(base_expenses * growth * noise)
        
        return expenses
    
    def _simulate_operating_expenses(self, dates):
        """Simule les d√©penses de fonctionnement"""
        if self.type == "departement":
            base_operating = self.config["budget_base"] * 0.70
        else:
            base_operating = self.config["budget_base"] * 0.65
        
        operating = []
        for i, date in enumerate(dates):
            growth = 1 + 0.033 * i
            noise = np.random.normal(1, 0.05)
            operating.append(base_operating * growth * noise)
        
        return operating
    
    def _simulate_investment_expenses(self, dates):
        """Simule les d√©penses d'investissement"""
        if self.type == "departement":
            base_investment = self.config["budget_base"] * 0.28
        else:
            base_investment = self.config["budget_base"] * 0.33
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            # Plans d'investissement sp√©cifiques aux DOM
            if year in [2007, 2013, 2019, 2024]:
                multiplier = 1.6
            elif year in [2009, 2015, 2021]:
                multiplier = 0.8
            else:
                multiplier = 1.0
            
            growth = 1 + 0.03 * i
            noise = np.random.normal(1, 0.16)
            investment.append(base_investment * growth * multiplier * noise)
        
        return investment
    
    def _simulate_debt_charges(self, dates):
        """Simule les charges de la dette"""
        if self.type == "departement":
            base_debt_charge = self.config["budget_base"] * 0.06
        else:
            base_debt_charge = self.config["budget_base"] * 0.05
        
        debt_charges = []
        for i, date in enumerate(dates):
            year = date.year
            if year >= 2005:
                increase = 1 + 0.008 * (year - 2005)
            else:
                increase = 1
            
            noise = np.random.normal(1, 0.10)
            debt_charges.append(base_debt_charge * increase * noise)
        
        return debt_charges
    
    def _simulate_staff_costs(self, dates):
        """Simule les d√©penses de personnel"""
        if self.type == "departement":
            base_staff = self.config["budget_base"] * 0.40
        else:
            base_staff = self.config["budget_base"] * 0.35
        
        staff_costs = []
        for i, date in enumerate(dates):
            growth = 1 + 0.032 * i
            noise = np.random.normal(1, 0.04)
            staff_costs.append(base_staff * growth * noise)
        
        return staff_costs
    
    def _simulate_gross_savings(self, dates):
        """Simule l'√©pargne brute"""
        if self.type == "departement":
            base_saving = self.config["budget_base"] * 0.04
        else:
            base_saving = self.config["budget_base"] * 0.05
        
        savings = []
        for i, date in enumerate(dates):
            year = date.year
            if year >= 2010:
                improvement = 1 + 0.007 * (year - 2010)
            else:
                improvement = 1
            
            noise = np.random.normal(1, 0.14)
            savings.append(base_saving * improvement * noise)
        
        return savings
    
    def _simulate_total_debt(self, dates):
        """Simule la dette totale"""
        if self.type == "departement":
            base_debt = self.config["budget_base"] * 0.80
        else:
            base_debt = self.config["budget_base"] * 0.75
        
        debt = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2007, 2013, 2019, 2024]:
                change = 1.2
            elif year in [2009, 2015, 2021]:
                change = 0.9
            else:
                change = 1.0
            
            noise = np.random.normal(1, 0.09)
            debt.append(base_debt * change * noise)
        
        return debt
    
    def _simulate_debt_ratio(self, dates):
        """Simule le taux d'endettement"""
        ratios = []
        for i, date in enumerate(dates):
            if self.type == "departement":
                base_ratio = 0.75
            else:
                base_ratio = 0.70
            
            year = date.year
            if year >= 2010:
                improvement = 1 - 0.009 * (year - 2010)
            else:
                improvement = 1
            
            noise = np.random.normal(1, 0.06)
            ratios.append(base_ratio * improvement * noise)
        
        return ratios
    
    def _simulate_tax_rate(self, dates):
        """Simule le taux de fiscalit√© (moyen)"""
        rates = []
        for i, date in enumerate(dates):
            if self.type == "departement":
                base_rate = 0.82
            else:
                base_rate = 0.78
            
            year = date.year
            if year >= 2010:
                increase = 1 + 0.004 * (year - 2010)
            else:
                increase = 1
            
            noise = np.random.normal(1, 0.03)
            rates.append(base_rate * increase * noise)
        
        return rates
    
    # M√©thodes d'investissement sp√©cifiques au D√©partement
    def _simulate_social_investment(self, dates):
        """Simule l'investissement dans l'action sociale"""
        base_investment = self.config["budget_base"] * 0.08
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2005, 2010, 2015, 2020]:
                year_multiplier = 1.8
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.035 * i
            noise = np.random.normal(1, 0.15)
            investment.append(base_investment * growth * year_multiplier * noise)
        
        return investment
    
    def _simulate_education_investment(self, dates):
        """Simule l'investissement √©ducatif (coll√®ges)"""
        base_investment = self.config["budget_base"] * 0.06
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2008, 2014, 2020]:
                year_multiplier = 1.7
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.032 * i
            noise = np.random.normal(1, 0.18)
            investment.append(base_investment * growth * year_multiplier * noise)
        
        return investment
    
    def _simulate_roads_investment(self, dates):
        """Simule l'investissement dans les routes"""
        base_investment = self.config["budget_base"] * 0.05
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2006, 2012, 2018, 2023]:
                year_multiplier = 1.9
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.03 * i
            noise = np.random.normal(1, 0.16)
            investment.append(base_investment * growth * year_multiplier * noise)
        
        return investment
    
    def _simulate_health_investment(self, dates):
        """Simule l'investissement dans la sant√©"""
        base_investment = self.config["budget_base"] * 0.04
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2009, 2015, 2021]:
                year_multiplier = 1.8
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.034 * i
            noise = np.random.normal(1, 0.17)
            investment.append(base_investment * growth * year_multiplier * noise)
        
        return investment
    
    def _simulate_culture_investment(self, dates):
        """Simule l'investissement culturel"""
        base_investment = self.config["budget_base"] * 0.03
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2010, 2016, 2022]:
                year_multiplier = 1.7
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.028 * i
            noise = np.random.normal(1, 0.15)
            investment.append(base_investment * growth * year_multiplier * noise)
        
        return investment
    
    # M√©thodes d'investissement sp√©cifiques √† la R√©gion
    def _simulate_highschool_investment(self, dates):
        """Simule l'investissement dans les lyc√©es"""
        base_investment = self.config["budget_base"] * 0.07
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2008, 2014, 2020]:
                year_multiplier = 1.8
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.035 * i
            noise = np.random.normal(1, 0.17)
            investment.append(base_investment * growth * year_multiplier * noise)
        
        return investment
    
    def _simulate_training_investment(self, dates):
        """Simule l'investissement dans la formation"""
        base_investment = self.config["budget_base"] * 0.06
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2009, 2015, 2021]:
                year_multiplier = 1.9
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.036 * i
            noise = np.random.normal(1, 0.18)
            investment.append(base_investment * growth * year_multiplier * noise)
        
        return investment
    
    def _simulate_transport_investment(self, dates):
        """Simule l'investissement dans les transports"""
        base_investment = self.config["budget_base"] * 0.08
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2007, 2013, 2019, 2024]:
                year_multiplier = 2.0
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.04 * i
            noise = np.random.normal(1, 0.20)
            investment.append(base_investment * growth * year_multiplier * noise)
        
        return investment
    
    def _simulate_economy_investment(self, dates):
        """Simule l'investissement dans l'√©conomie"""
        base_investment = self.config["budget_base"] * 0.05
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2010, 2016, 2022]:
                year_multiplier = 1.7
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.033 * i
            noise = np.random.normal(1, 0.16)
            investment.append(base_investment * growth * year_multiplier * noise)
        
        return investment
    
    def _simulate_tourism_investment(self, dates):
        """Simule l'investissement dans le tourisme"""
        base_investment = self.config["budget_base"] * 0.04
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2011, 2017, 2023]:
                year_multiplier = 1.8
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.035 * i
            noise = np.random.normal(1, 0.19)
            investment.append(base_investment * growth * year_multiplier * noise)
        
        return investment
    
    def _add_collectivite_trends(self, df):
        """Ajoute des tendances r√©alistes adapt√©es √† La R√©union"""
        for i, row in df.iterrows():
            year = row['Annee']
            
            # D√©veloppement initial (2002-2005)
            if 2002 <= year <= 2005:
                if self.type == "departement":
                    df.loc[i, 'Investissement_Action_Sociale'] *= 1.4
                    df.loc[i, 'Investissement_Routes'] *= 1.5
                else:
                    df.loc[i, 'Investissement_Lycees'] *= 1.4
                    df.loc[i, 'Investissement_Transport'] *= 1.6
            
            # Plan de d√©veloppement r√©unionnais (2006-2010)
            if 2006 <= year <= 2010:
                df.loc[i, 'Dotations_Etat'] *= 1.12
                df.loc[i, 'Fonds_Europeens'] *= 1.25
                df.loc[i, 'Investissement'] *= 1.18
            
            # Impact de la crise financi√®re (2008-2009)
            if 2008 <= year <= 2009:
                df.loc[i, 'Recettes_Totales'] *= 0.94
                df.loc[i, 'Investissement'] *= 0.82
            
            # D√©veloppement du tourisme et des infrastructures (2011-2015)
            elif 2011 <= year <= 2015:
                if self.type == "departement":
                    df.loc[i, 'Investissement_Sante'] *= 1.3
                else:
                    df.loc[i, 'Investissement_Tourisme'] *= 1.5
                    df.loc[i, 'Investissement_Transport'] *= 1.4
            
            # Crise sociale de 2018 et plan de soutien
            if year == 2018:
                df.loc[i, 'Dotations_Etat'] *= 1.15
                if self.type == "departement":
                    df.loc[i, 'Investissement_Action_Sociale'] *= 1.4
            
            # Impact de la crise COVID-19 (2020-2021)
            if 2020 <= year <= 2021:
                if year == 2020:
                    # Baisse des recettes mais soutien de l'√âtat et de l'Europe
                    df.loc[i, 'Autres_Recettes'] *= 0.75
                    df.loc[i, 'Dotations_Etat'] *= 1.18
                    df.loc[i, 'Fonds_Europeens'] *= 1.22
            
            # Plan de relance post-COVID sp√©cifique aux DOM (2022-2025)
            if year >= 2022:
                df.loc[i, 'Investissement'] *= 1.16
                if self.type == "departement":
                    df.loc[i, 'Investissement_Sante'] *= 1.3
                else:
                    df.loc[i, 'Investissement_Economie'] *= 1.4
                    df.loc[i, 'Investissement_Formation'] *= 1.35
    
    def create_financial_analysis(self, df):
        """Cr√©e une analyse compl√®te des finances de la collectivit√©"""
        plt.style.use('seaborn-v0_8')
        fig = plt.figure(figsize=(20, 24))
        
        # 1. √âvolution des recettes et d√©penses
        ax1 = plt.subplot(4, 2, 1)
        self._plot_revenue_expenses(df, ax1)
        
        # 2. Structure des recettes
        ax2 = plt.subplot(4, 2, 2)
        self._plot_revenue_structure(df, ax2)
        
        # 3. Structure des d√©penses
        ax3 = plt.subplot(4, 2, 3)
        self._plot_expenses_structure(df, ax3)
        
        # 4. Investissements
        ax4 = plt.subplot(4, 2, 4)
        self._plot_investments(df, ax4)
        
        # 5. Dette et endettement
        ax5 = plt.subplot(4, 2, 5)
        self._plot_debt(df, ax5)
        
        # 6. Indicateurs de performance
        ax6 = plt.subplot(4, 2, 6)
        self._plot_performance_indicators(df, ax6)
        
        # 7. D√©mographie
        ax7 = plt.subplot(4, 2, 7)
        self._plot_demography(df, ax7)
        
        # 8. Investissements sectoriels
        ax8 = plt.subplot(4, 2, 8)
        self._plot_sectorial_investments(df, ax8)
        
        plt.suptitle(f'Analyse des Comptes de {self.collectivite} - La R√©union ({self.start_year}-{self.end_year})', 
                    fontsize=16, fontweight='bold')
        plt.tight_layout()
        plt.savefig(f'{self.collectivite.replace(" ", "_")}_financial_analysis.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        # G√©n√©rer les insights
        self._generate_financial_insights(df)
    
    def _plot_revenue_expenses(self, df, ax):
        """Plot de l'√©volution des recettes et d√©penses"""
        ax.plot(df['Annee'], df['Recettes_Totales'], label='Recettes Totales', 
               linewidth=2, color='#2A9D8F', alpha=0.8)
        ax.plot(df['Annee'], df['Depenses_Totales'], label='D√©penses Totales', 
               linewidth=2, color='#E76F51', alpha=0.8)
        
        ax.set_title('√âvolution des Recettes et D√©penses (M‚Ç¨)', 
                    fontsize=12, fontweight='bold')
        ax.set_ylabel('Montants (M‚Ç¨)')
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    def _plot_revenue_structure(self, df, ax):
        """Plot de la structure des recettes"""
        years = df['Annee']
        width = 0.8
        
        bottom = np.zeros(len(years))
        categories = ['Impots_Locaux', 'Dotations_Etat', 'Fonds_Europeens', 'Autres_Recettes']
        colors = ['#264653', '#2A9D8F', '#E76F51', '#F9A602']
        labels = ['Imp√¥ts Locaux', 'Dotations √âtat', 'Fonds Europ√©ens', 'Autres Recettes']
        
        for i, category in enumerate(categories):
            ax.bar(years, df[category], width, label=labels[i], bottom=bottom, color=colors[i])
            bottom += df[category]
        
        ax.set_title('Structure des Recettes (M‚Ç¨)', fontsize=12, fontweight='bold')
        ax.set_ylabel('Montants (M‚Ç¨)')
        ax.legend()
        ax.grid(True, alpha=0.3, axis='y')
    
    def _plot_expenses_structure(self, df, ax):
        """Plot de la structure des d√©penses"""
        years = df['Annee']
        width = 0.8
        
        bottom = np.zeros(len(years))
        categories = ['Fonctionnement', 'Investissement', 'Charge_Dette', 'Personnel']
        colors = ['#264653', '#2A9D8F', '#E76F51', '#F9A602']
        labels = ['Fonctionnement', 'Investissement', 'Charge Dette', 'Personnel']
        
        for i, category in enumerate(categories):
            ax.bar(years, df[category], width, label=labels[i], bottom=bottom, color=colors[i])
            bottom += df[category]
        
        ax.set_title('Structure des D√©penses (M‚Ç¨)', fontsize=12, fontweight='bold')
        ax.set_ylabel('Montants (M‚Ç¨)')
        ax.legend()
        ax.grid(True, alpha=0.3, axis='y')
    
    def _plot_investments(self, df, ax):
        """Plot des investissements"""
        if self.type == "departement":
            ax.plot(df['Annee'], df['Investissement_Action_Sociale'], label='Action Sociale', 
                   linewidth=2, color='#264653', alpha=0.8)
            ax.plot(df['Annee'], df['Investissement_Education'], label='√âducation', 
                   linewidth=2, color='#2A9D8F', alpha=0.8)
            ax.plot(df['Annee'], df['Investissement_Routes'], label='Routes', 
                   linewidth=2, color='#E76F51', alpha=0.8)
            ax.plot(df['Annee'], df['Investissement_Sante'], label='Sant√©', 
                   linewidth=2, color='#F9A602', alpha=0.8)
            ax.plot(df['Annee'], df['Investissement_Culture'], label='Culture', 
                   linewidth=2, color='#6A0572', alpha=0.8)
        else:
            ax.plot(df['Annee'], df['Investissement_Lycees'], label='Lyc√©es', 
                   linewidth=2, color='#264653', alpha=0.8)
            ax.plot(df['Annee'], df['Investissement_Formation'], label='Formation', 
                   linewidth=2, color='#2A9D8F', alpha=0.8)
            ax.plot(df['Annee'], df['Investissement_Transport'], label='Transport', 
                   linewidth=2, color='#E76F51', alpha=0.8)
            ax.plot(df['Annee'], df['Investissement_Economie'], label='√âconomie', 
                   linewidth=2, color='#F9A602', alpha=0.8)
            ax.plot(df['Annee'], df['Investissement_Tourisme'], label='Tourisme', 
                   linewidth=2, color='#6A0572', alpha=0.8)
        
        ax.set_title('R√©partition des Investissements (M‚Ç¨)', fontsize=12, fontweight='bold')
        ax.set_ylabel('Montants (M‚Ç¨)')
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    def _plot_debt(self, df, ax):
        """Plot de la dette et du taux d'endettement"""
        # Dette totale
        ax.bar(df['Annee'], df['Dette_Totale'], label='Dette Totale (M‚Ç¨)', 
              color='#264653', alpha=0.7)
        
        ax.set_title('Dette et Taux d\'Endettement', fontsize=12, fontweight='bold')
        ax.set_ylabel('Dette (M‚Ç¨)', color='#264653')
        ax.tick_params(axis='y', labelcolor='#264653')
        ax.grid(True, alpha=0.3, axis='y')
        
        # Taux d'endettement en second axe
        ax2 = ax.twinx()
        ax2.plot(df['Annee'], df['Taux_Endettement'], label='Taux d\'Endettement', 
                linewidth=3, color='#E76F51')
        ax2.set_ylabel('Taux d\'Endettement', color='#E76F51')
        ax2.tick_params(axis='y', labelcolor='#E76F51')
        
        # Combiner les l√©gendes
        lines1, labels1 = ax.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
    
    def _plot_performance_indicators(self, df, ax):
        """Plot des indicateurs de performance"""
        # √âpargne brute
        ax.bar(df['Annee'], df['Epargne_Brute'], label='√âpargne Brute (M‚Ç¨)', 
              color='#2A9D8F', alpha=0.7)
        
        ax.set_title('Indicateurs de Performance', fontsize=12, fontweight='bold')
        ax.set_ylabel('√âpargne Brute (M‚Ç¨)', color='#2A9D8F')
        ax.tick_params(axis='y', labelcolor='#2A9D8F')
        ax.grid(True, alpha=0.3, axis='y')
        
        # Taux de fiscalit√© en second axe
        ax2 = ax.twinx()
        ax2.plot(df['Annee'], df['Taux_Fiscalite'], label='Taux de Fiscalit√©', 
                linewidth=3, color='#F9A602')
        ax2.set_ylabel('Taux de Fiscalit√©', color='#F9A602')
        ax2.tick_params(axis='y', labelcolor='#F9A602')
        
        # Combiner les l√©gendes
        lines1, labels1 = ax.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
    
    def _plot_demography(self, df, ax):
        """Plot de l'√©volution d√©mographique"""
        ax.plot(df['Annee'], df['Population'], label='Population', 
               linewidth=2, color='#264653', alpha=0.8)
        
        ax.set_title('√âvolution D√©mographique', fontsize=12, fontweight='bold')
        ax.set_ylabel('Population', color='#264653')
        ax.tick_params(axis='y', labelcolor='#264653')
        ax.grid(True, alpha=0.3)
    
    def _plot_sectorial_investments(self, df, ax):
        """Plot des investissements sectoriels"""
        years = df['Annee']
        width = 0.8
        
        bottom = np.zeros(len(years))
        if self.type == "departement":
            categories = ['Investissement_Action_Sociale', 'Investissement_Education', 
                         'Investissement_Routes', 'Investissement_Sante', 'Investissement_Culture']
            colors = ['#264653', '#2A9D8F', '#E76F51', '#F9A602', '#6A0572']
            labels = ['Action Sociale', '√âducation', 'Routes', 'Sant√©', 'Culture']
        else:
            categories = ['Investissement_Lycees', 'Investissement_Formation', 
                         'Investissement_Transport', 'Investissement_Economie', 'Investissement_Tourisme']
            colors = ['#264653', '#2A9D8F', '#E76F51', '#F9A602', '#6A0572']
            labels = ['Lyc√©es', 'Formation', 'Transport', '√âconomie', 'Tourisme']
        
        for i, category in enumerate(categories):
            ax.bar(years, df[category], width, label=labels[i], bottom=bottom, color=colors[i])
            bottom += df[category]
        
        ax.set_title('R√©partition Sectorielle des Investissements (M‚Ç¨)', fontsize=12, fontweight='bold')
        ax.set_ylabel('Montants (M‚Ç¨)')
        ax.legend()
        ax.grid(True, alpha=0.3, axis='y')
    
    def _generate_financial_insights(self, df):
        """G√©n√®re des insights analytiques adapt√©s √† La R√©union"""
        print(f"üèõÔ∏è INSIGHTS ANALYTIQUES - {self.collectivite} (La R√©union)")
        print("=" * 60)
        
        # 1. Statistiques de base
        print("\n1. üìà STATISTIQUES G√âN√âRALES:")
        avg_revenue = df['Recettes_Totales'].mean()
        avg_expenses = df['Depenses_Totales'].mean()
        avg_savings = df['Epargne_Brute'].mean()
        avg_debt = df['Dette_Totale'].mean()
        
        print(f"Recettes moyennes annuelles: {avg_revenue:.2f} M‚Ç¨")
        print(f"D√©penses moyennes annuelles: {avg_expenses:.2f} M‚Ç¨")
        print(f"√âpargne brute moyenne: {avg_savings:.2f} M‚Ç¨")
        print(f"Dette moyenne: {avg_debt:.2f} M‚Ç¨")
        
        # 2. Croissance
        print("\n2. üìä TAUX DE CROISSANCE:")
        revenue_growth = ((df['Recettes_Totales'].iloc[-1] / 
                          df['Recettes_Totales'].iloc[0]) - 1) * 100
        population_growth = ((df['Population'].iloc[-1] / 
                             df['Population'].iloc[0]) - 1) * 100
        
        print(f"Croissance des recettes ({self.start_year}-{self.end_year}): {revenue_growth:.1f}%")
        print(f"Croissance de la population ({self.start_year}-{self.end_year}): {population_growth:.1f}%")
        
        # 3. Structure financi√®re (sp√©cificit√©s r√©unionnaises)
        print("\n3. üìã STRUCTURE FINANCI√àRE:")
        tax_share = (df['Impots_Locaux'].mean() / df['Recettes_Totales'].mean()) * 100
        state_share = (df['Dotations_Etat'].mean() / df['Recettes_Totales'].mean()) * 100
        europe_share = (df['Fonds_Europeens'].mean() / df['Recettes_Totales'].mean()) * 100
        investment_share = (df['Investissement'].mean() / df['Depenses_Totales'].mean()) * 100
        
        print(f"Part des imp√¥ts locaux dans les recettes: {tax_share:.1f}%")
        print(f"Part des dotations de l'√âtat dans les recettes: {state_share:.1f}%")
        print(f"Part des fonds europ√©ens dans les recettes: {europe_share:.1f}%")
        print(f"Part de l'investissement dans les d√©penses: {investment_share:.1f}%")
        
        # 4. Dette et fiscalit√©
        print("\n4. üí∞ ENDETTEMENT ET FISCALIT√â:")
        avg_debt_ratio = df['Taux_Endettement'].mean() * 100
        avg_tax_rate = df['Taux_Fiscalite'].mean()
        last_debt_ratio = df['Taux_Endettement'].iloc[-1] * 100
        
        print(f"Taux d'endettement moyen: {avg_debt_ratio:.1f}%")
        print(f"Taux d'endettement final: {last_debt_ratio:.1f}%")
        print(f"Taux de fiscalit√© moyen: {avg_tax_rate:.2f}")
        
        # 5. Sp√©cificit√©s de la collectivit√© r√©unionnaise
        print(f"\n5. üåü SP√âCIFICIT√âS DE {self.collectivite.upper()} (LA R√âUNION):")
        print(f"Type de collectivit√©: {self.config['type']}")
        print(f"Sp√©cialit√©s: {', '.join(self.config['specialites'])}")
        
        # 6. √âv√©nements marquants sp√©cifiques √† La R√©union
        print("\n6. üìÖ √âV√âNEMENTS MARQUANTS LA R√âUNION:")
        print("‚Ä¢ 2002-2005: D√©veloppement initial et renforcement des infrastructures")
        print("‚Ä¢ 2006-2010: Plan de d√©veloppement r√©unionnais et investissements europ√©ens")
        print("‚Ä¢ 2011-2015: D√©veloppement du tourisme et des infrastructures")
        print("‚Ä¢ 2018: Crise sociale et plan de soutien")
        print("‚Ä¢ 2020-2021: Impact de la crise COVID-19 et plans de soutien")
        print("‚Ä¢ 2022-2025: Plan de relance post-COVID sp√©cifique aux DOM")
        
        # 7. Recommandations adapt√©es √† La R√©union
        print("\n7. üí° RECOMMANDATIONS STRAT√âGIQUES:")
        if self.type == "departement":
            print("‚Ä¢ Renforcer l'action sociale face aux d√©fis d√©mographiques")
            print("‚Ä¢ Moderniser les coll√®ges et les infrastructures √©ducatives")
            print("‚Ä¢ D√©velopper les infrastructures routi√®res pour d√©senclaver les territoires")
            print("‚Ä¢ Am√©liorer l'acc√®s aux soins et aux services de sant√©")
        else:
            print("‚Ä¢ D√©velopper les lyc√©es et la formation professionnelle")
            print("‚Ä¢ Am√©liorer les transports r√©gionaux (routes, transports en commun)")
            print("‚Ä¢ Soutenir le d√©veloppement √©conomique et l'innovation")
            print("‚Ä¢ Promouvoir le tourisme durable et responsable")
        
        print("‚Ä¢ Valoriser les fonds europ√©ens et les programmes de coop√©ration")
        print("‚Ä¢ D√©velopper les √©nergies renouvelables et l'autonomie √©nerg√©tique")
        print("‚Ä¢ Pr√©server la biodiversit√© unique de La R√©union")
        print("‚Ä¢ Renforcer la coop√©ration r√©gionale dans l'oc√©an Indien")

def main():
    """Fonction principale pour La R√©union"""
    print("üèõÔ∏è ANALYSE DES COMPTES DU D√âPARTEMENT ET DE LA R√âGION R√âUNION (2002-2025)")
    print("=" * 70)
    
    # Demander √† l'utilisateur de choisir une collectivit√©
    print("Choix de la collectivit√©:")
    print("1. D√©partement R√©union")
    print("2. R√©gion R√©union")
    
    try:
        choix = int(input("\nChoisissez le num√©ro de la collectivit√© √† analyser: "))
        if choix == 1:
            collectivite_selectionnee = "D√©partement R√©union"
            collectivite_type = "departement"
        elif choix == 2:
            collectivite_selectionnee = "R√©gion R√©union"
            collectivite_type = "region"
        else:
            raise ValueError
    except (ValueError, IndexError):
        print("Choix invalide. S√©lection du D√©partement R√©union par d√©faut.")
        collectivite_selectionnee = "D√©partement R√©union"
        collectivite_type = "departement"
    
    # Initialiser l'analyseur
    analyzer = ReunionCollectiviteFinanceAnalyzer(collectivite_selectionnee, collectivite_type)
    
    # G√©n√©rer les donn√©es
    financial_data = analyzer.generate_financial_data()
    
    # Sauvegarder les donn√©es
    output_file = f'{collectivite_selectionnee.replace(" ", "_")}_financial_data_2002_2025.csv'
    financial_data.to_csv(output_file, index=False)
    print(f"üíæ Donn√©es sauvegard√©es: {output_file}")
    
    # Aper√ßu des donn√©es
    print("\nüëÄ Aper√ßu des donn√©es:")
    print(financial_data[['Annee', 'Population', 'Recettes_Totales', 'Depenses_Totales', 'Dette_Totale']].head())
    
    # Cr√©er l'analyse
    print("\nüìà Cr√©ation de l'analyse financi√®re...")
    analyzer.create_financial_analysis(financial_data)
    
    print(f"\n‚úÖ Analyse des comptes de {collectivite_selectionnee} termin√©e!")
    print(f"üìä P√©riode: {analyzer.start_year}-{analyzer.end_year}")
    print("üì¶ Donn√©es: D√©mographie, finances, investissements, dette")

if __name__ == "__main__":
    main()